import 'package:figma/figma.dart';

extension TextCopyWithExtensions on Text {
  Text copyWith({
    String characters,
    TypeStyle style,
    Map<int, TypeStyle> characterStyleOverrides,
    List<int> styleOverrideTable,
    String id,
    String name,
    bool visible,
    dynamic pluginData,
    dynamic sharedPluginData,
    bool locked,
    List<ExportSetting> exportSettings,
    BlendMode blendMode,
    bool preserveRatio,
    LayoutAlign layoutAlign,
    LayoutConstraint constraints,
    String transitionNodeID,
    int transitionDuration,
    EasingType transitionEasing,
    double opacity,
    SizeRectangle absoluteBoundingBox,
    List<Effect> effects,
    Vector2D size,
    List<List<num>> relativeTransform,
    bool isMask,
    List<Paint> fills,
    List<dynamic> fillGeometry,
    List<Paint> strokes,
    double strokeWeight,
    StrokeCap strokeCap,
    StrokeJoin strokeJoin,
    List<double> strokeDashes,
    double strokeMiterAngle,
    List<dynamic> strokeGeometry,
    StrokeAlign strokeAlign,
    Map<StyleTypeKey, String> styles,
  }) =>
      Text(
        absoluteBoundingBox: absoluteBoundingBox ?? this.absoluteBoundingBox,
        blendMode: blendMode ?? this.blendMode,
        characterStyleOverrides:
            characterStyleOverrides ?? this.characterStyleOverrides,
        characters: characters ?? this.characters,
        constraints: constraints ?? this.constraints,
        effects: effects ?? this.effects,
        exportSettings: exportSettings ?? this.exportSettings,
        fillGeometry: fillGeometry ?? this.fillGeometry,
        fills: fills ?? this.fills,
        id: id ?? this.id,
        isMask: isMask ?? this.isMask,
        layoutAlign: layoutAlign ?? this.layoutAlign,
        locked: locked ?? this.locked,
        name: name ?? this.name,
        opacity: opacity ?? this.opacity,
        pluginData: pluginData ?? this.pluginData,
        preserveRatio: preserveRatio ?? this.preserveRatio,
        relativeTransform: relativeTransform ?? this.relativeTransform,
        sharedPluginData: sharedPluginData ?? this.sharedPluginData,
        size: size ?? this.size,
        strokeAlign: strokeAlign ?? this.strokeAlign,
        strokeCap: strokeCap ?? this.strokeCap,
        strokeDashes: strokeDashes ?? this.strokeDashes,
        strokeGeometry: strokeGeometry ?? this.strokeGeometry,
        strokeJoin: strokeJoin ?? this.strokeJoin,
        strokeMiterAngle: strokeMiterAngle ?? this.strokeMiterAngle,
        strokeWeight: strokeWeight ?? this.strokeWeight,
        strokes: strokes ?? this.strokes,
        style: style ?? this.style,
        styleOverrideTable: styleOverrideTable ?? this.styleOverrideTable,
        styles: styles ?? this.styles,
        transitionDuration: transitionDuration ?? this.transitionDuration,
        transitionEasing: transitionEasing ?? this.transitionEasing,
        transitionNodeID: transitionNodeID ?? this.transitionNodeID,
        visible: visible ?? this.visible,
      );
}

extension FrameCopyWithExtensions on Frame {
  Frame copyWith({
    String id,
    String name,
    bool visible,
    dynamic pluginData,
    dynamic sharedPluginData,
    List<Node> children,
    bool locked,
    List<Paint> fills,
    List<Paint> strokes,
    num strokeWeight,
    StrokeAlign strokeAlign,
    double cornerRadius,
    List<num> rectangleCornerRadii,
    List<ExportSetting> exportSettings,
    BlendMode blendMode,
    bool preserveRatio,
    LayoutConstraint constraints,
    LayoutAlign layoutAlign,
    String transitionNodeID,
    int transitionDuration,
    EasingType transitionEasing,
    double opacity,
    SizeRectangle absoluteBoundingBox,
    Vector2D size,
    List<List<num>> relativeTransform,
    bool clipsContent,
    LayoutMode layoutMode,
    CounterAxisSizingMode counterAxisSizingMode,
    num horizontalPadding,
    num verticalPadding,
    num itemSpacing,
    List<LayoutGrid> layoutGrids,
    OverflowDirection overflowDirection,
    List<Effect> effects,
    bool isMask,
    bool isMaskOutline,
  }) =>
      Frame(
        absoluteBoundingBox: absoluteBoundingBox ?? this.absoluteBoundingBox,
        blendMode: blendMode ?? this.blendMode,
        children: children ?? this.children,
        clipsContent: clipsContent ?? this.clipsContent,
        constraints: constraints ?? this.constraints,
        cornerRadius: cornerRadius ?? this.cornerRadius,
        counterAxisSizingMode:
            counterAxisSizingMode ?? this.counterAxisSizingMode,
        effects: effects ?? this.effects,
        exportSettings: exportSettings ?? this.exportSettings,
        fills: fills ?? this.fills,
        horizontalPadding: horizontalPadding ?? this.horizontalPadding,
        id: id ?? this.id,
        isMask: isMask ?? this.isMask,
        isMaskOutline: isMaskOutline ?? this.isMaskOutline,
        itemSpacing: itemSpacing ?? this.itemSpacing,
        layoutAlign: layoutAlign ?? this.layoutAlign,
        layoutGrids: layoutGrids ?? this.layoutGrids,
        layoutMode: layoutMode ?? this.layoutMode,
        locked: locked ?? this.locked,
        name: name ?? this.name,
        opacity: opacity ?? this.opacity,
        overflowDirection: overflowDirection ?? this.overflowDirection,
        pluginData: pluginData ?? this.pluginData,
        preserveRatio: preserveRatio ?? this.preserveRatio,
        rectangleCornerRadii: rectangleCornerRadii ?? this.rectangleCornerRadii,
        relativeTransform: relativeTransform ?? this.relativeTransform,
        sharedPluginData: sharedPluginData ?? this.sharedPluginData,
        size: size ?? this.size,
        strokeAlign: strokeAlign ?? this.strokeAlign,
        strokeWeight: strokeWeight ?? this.strokeWeight,
        strokes: strokes ?? this.strokes,
        transitionDuration: transitionDuration ?? this.transitionDuration,
        transitionEasing: transitionEasing ?? this.transitionEasing,
        transitionNodeID: transitionNodeID ?? this.transitionNodeID,
        verticalPadding: verticalPadding ?? this.verticalPadding,
        visible: visible ?? this.visible,
      );
}

extension InstanceCopyWithExtensions on Instance {
  Instance copyWith({
    String componentId,
    String id,
    String name,
    bool visible,
    dynamic pluginData,
    dynamic sharedPluginData,
    List<Node> children,
    bool locked,
    List<Paint> fills,
    List<Paint> strokes,
    num strokeWeight,
    StrokeAlign strokeAlign,
    double cornerRadius,
    List<num> rectangleCornerRadii,
    List<ExportSetting> exportSettings,
    BlendMode blendMode,
    bool preserveRatio,
    LayoutConstraint constraints,
    LayoutAlign layoutAlign,
    String transitionNodeID,
    int transitionDuration,
    EasingType transitionEasing,
    double opacity,
    SizeRectangle absoluteBoundingBox,
    Vector2D size,
    List<List<num>> relativeTransform,
    bool clipsContent,
    LayoutMode layoutMode,
    CounterAxisSizingMode counterAxisSizingMode,
    num horizontalPadding,
    num verticalPadding,
    num itemSpacing,
    List<LayoutGrid> layoutGrids,
    OverflowDirection overflowDirection,
    List<Effect> effects,
    bool isMask,
    bool isMaskOutline,
  }) =>
      Instance(
        componentId: componentId ?? this.componentId,
        absoluteBoundingBox: absoluteBoundingBox ?? this.absoluteBoundingBox,
        blendMode: blendMode ?? this.blendMode,
        children: children ?? this.children,
        clipsContent: clipsContent ?? this.clipsContent,
        constraints: constraints ?? this.constraints,
        cornerRadius: cornerRadius ?? this.cornerRadius,
        counterAxisSizingMode:
            counterAxisSizingMode ?? this.counterAxisSizingMode,
        effects: effects ?? this.effects,
        exportSettings: exportSettings ?? this.exportSettings,
        fills: fills ?? this.fills,
        horizontalPadding: horizontalPadding ?? this.horizontalPadding,
        id: id ?? this.id,
        isMask: isMask ?? this.isMask,
        isMaskOutline: isMaskOutline ?? this.isMaskOutline,
        itemSpacing: itemSpacing ?? this.itemSpacing,
        layoutAlign: layoutAlign ?? this.layoutAlign,
        layoutGrids: layoutGrids ?? this.layoutGrids,
        layoutMode: layoutMode ?? this.layoutMode,
        locked: locked ?? this.locked,
        name: name ?? this.name,
        opacity: opacity ?? this.opacity,
        overflowDirection: overflowDirection ?? this.overflowDirection,
        pluginData: pluginData ?? this.pluginData,
        preserveRatio: preserveRatio ?? this.preserveRatio,
        rectangleCornerRadii: rectangleCornerRadii ?? this.rectangleCornerRadii,
        relativeTransform: relativeTransform ?? this.relativeTransform,
        sharedPluginData: sharedPluginData ?? this.sharedPluginData,
        size: size ?? this.size,
        strokeAlign: strokeAlign ?? this.strokeAlign,
        strokeWeight: strokeWeight ?? this.strokeWeight,
        strokes: strokes ?? this.strokes,
        transitionDuration: transitionDuration ?? this.transitionDuration,
        transitionEasing: transitionEasing ?? this.transitionEasing,
        transitionNodeID: transitionNodeID ?? this.transitionNodeID,
        verticalPadding: verticalPadding ?? this.verticalPadding,
        visible: visible ?? this.visible,
      );
}

extension CanvasCopyWithExtensions on Canvas {
  Canvas copyWith({
    String componentId,
    String id,
    String name,
    bool visible,
    dynamic pluginData,
    dynamic sharedPluginData,
    List<Node> children,
    List<ExportSetting> exportSettings,
    Color backgroundColor,
    String prototypeStartNodeID,
  }) =>
      Canvas(
        children: children ?? this.children,
        exportSettings: exportSettings ?? this.exportSettings,
        id: id ?? this.id,
        name: name ?? this.name,
        pluginData: pluginData ?? this.pluginData,
        sharedPluginData: sharedPluginData ?? this.sharedPluginData,
        visible: visible ?? this.visible,
        backgroundColor: backgroundColor ?? this.backgroundColor,
        prototypeStartNodeID: prototypeStartNodeID ?? this.prototypeStartNodeID,
      );
}

extension DocumentCopyWithExtensions on Document {
  Document copyWith({
    String componentId,
    String id,
    String name,
    bool visible,
    dynamic pluginData,
    dynamic sharedPluginData,
    List<Node> children,
  }) =>
      Document(
        children: children ?? this.children,
        id: id ?? this.id,
        name: name ?? this.name,
        pluginData: pluginData ?? this.pluginData,
        sharedPluginData: sharedPluginData ?? this.sharedPluginData,
        visible: visible ?? this.visible,
      );
}

extension RectangleCopyWithExtensions on Rectangle {
  Rectangle copyWith({
    String id,
    String name,
    bool visible,
    dynamic pluginData,
    dynamic sharedPluginData,
    bool locked,
    List<Paint> fills,
    List<Paint> strokes,
    num strokeWeight,
    StrokeAlign strokeAlign,
    double cornerRadius,
    List<num> rectangleCornerRadii,
    List<ExportSetting> exportSettings,
    BlendMode blendMode,
    bool preserveRatio,
    LayoutConstraint constraints,
    LayoutAlign layoutAlign,
    String transitionNodeID,
    int transitionDuration,
    EasingType transitionEasing,
    double opacity,
    SizeRectangle absoluteBoundingBox,
    Vector2D size,
    List<List<num>> relativeTransform,
    OverflowDirection overflowDirection,
    List<Effect> effects,
    bool isMask,
    bool isMaskOutline,
    List<dynamic> fillGeometry,
    StrokeCap strokeCap,
    List<dynamic> strokeGeometry,
    StrokeJoin strokeJoin,
    List<double> strokeDashes,
    double strokeMiterAngle,
    Map<StyleTypeKey, String> styles,
  }) =>
      Rectangle(
        absoluteBoundingBox: absoluteBoundingBox ?? this.absoluteBoundingBox,
        blendMode: blendMode ?? this.blendMode,
        constraints: constraints ?? this.constraints,
        cornerRadius: cornerRadius ?? this.cornerRadius,
        effects: effects ?? this.effects,
        exportSettings: exportSettings ?? this.exportSettings,
        fills: fills ?? this.fills,
        id: id ?? this.id,
        isMask: isMask ?? this.isMask,
        layoutAlign: layoutAlign ?? this.layoutAlign,
        locked: locked ?? this.locked,
        name: name ?? this.name,
        opacity: opacity ?? this.opacity,
        pluginData: pluginData ?? this.pluginData,
        preserveRatio: preserveRatio ?? this.preserveRatio,
        rectangleCornerRadii: rectangleCornerRadii ?? this.rectangleCornerRadii,
        relativeTransform: relativeTransform ?? this.relativeTransform,
        sharedPluginData: sharedPluginData ?? this.sharedPluginData,
        size: size ?? this.size,
        strokeAlign: strokeAlign ?? this.strokeAlign,
        strokeWeight: strokeWeight ?? this.strokeWeight,
        strokes: strokes ?? this.strokes,
        transitionDuration: transitionDuration ?? this.transitionDuration,
        transitionEasing: transitionEasing ?? this.transitionEasing,
        transitionNodeID: transitionNodeID ?? this.transitionNodeID,
        visible: visible ?? this.visible,
        fillGeometry: fillGeometry ?? this.fillGeometry,
        strokeCap: strokeCap ?? this.strokeCap,
        strokeDashes: strokeDashes ?? this.strokeDashes,
        strokeGeometry: strokeGeometry ?? this.strokeGeometry,
        strokeJoin: strokeJoin ?? this.strokeJoin,
        strokeMiterAngle: strokeMiterAngle ?? this.strokeMiterAngle,
        styles: styles ?? this.styles,
      );
}

extension VectorCopyWithExtensions on Vector {
  Vector copyWith({
    String id,
    String name,
    bool visible,
    dynamic pluginData,
    dynamic sharedPluginData,
    bool locked,
    List<Paint> fills,
    List<Paint> strokes,
    num strokeWeight,
    StrokeAlign strokeAlign,
    List<ExportSetting> exportSettings,
    BlendMode blendMode,
    bool preserveRatio,
    LayoutConstraint constraints,
    LayoutAlign layoutAlign,
    String transitionNodeID,
    int transitionDuration,
    EasingType transitionEasing,
    double opacity,
    SizeRectangle absoluteBoundingBox,
    Vector2D size,
    List<List<num>> relativeTransform,
    OverflowDirection overflowDirection,
    List<Effect> effects,
    bool isMask,
    bool isMaskOutline,
    List<dynamic> fillGeometry,
    StrokeCap strokeCap,
    List<dynamic> strokeGeometry,
    StrokeJoin strokeJoin,
    List<double> strokeDashes,
    double strokeMiterAngle,
    Map<StyleTypeKey, String> styles,
  }) =>
      Vector(
        absoluteBoundingBox: absoluteBoundingBox ?? this.absoluteBoundingBox,
        blendMode: blendMode ?? this.blendMode,
        constraints: constraints ?? this.constraints,
        effects: effects ?? this.effects,
        exportSettings: exportSettings ?? this.exportSettings,
        fills: fills ?? this.fills,
        id: id ?? this.id,
        isMask: isMask ?? this.isMask,
        layoutAlign: layoutAlign ?? this.layoutAlign,
        locked: locked ?? this.locked,
        name: name ?? this.name,
        opacity: opacity ?? this.opacity,
        pluginData: pluginData ?? this.pluginData,
        preserveRatio: preserveRatio ?? this.preserveRatio,
        relativeTransform: relativeTransform ?? this.relativeTransform,
        sharedPluginData: sharedPluginData ?? this.sharedPluginData,
        size: size ?? this.size,
        strokeAlign: strokeAlign ?? this.strokeAlign,
        strokeWeight: strokeWeight ?? this.strokeWeight,
        strokes: strokes ?? this.strokes,
        transitionDuration: transitionDuration ?? this.transitionDuration,
        transitionEasing: transitionEasing ?? this.transitionEasing,
        transitionNodeID: transitionNodeID ?? this.transitionNodeID,
        visible: visible ?? this.visible,
        fillGeometry: fillGeometry ?? this.fillGeometry,
        strokeCap: strokeCap ?? this.strokeCap,
        strokeDashes: strokeDashes ?? this.strokeDashes,
        strokeGeometry: strokeGeometry ?? this.strokeGeometry,
        strokeJoin: strokeJoin ?? this.strokeJoin,
        strokeMiterAngle: strokeMiterAngle ?? this.strokeMiterAngle,
        styles: styles ?? this.styles,
      );
}

extension GroupCopyWithExtensions on Group {
  Group copyWith({
    String id,
    String name,
    bool visible,
    dynamic pluginData,
    dynamic sharedPluginData,
    List<Node> children,
    bool locked,
    List<Paint> fills,
    List<Paint> strokes,
    num strokeWeight,
    StrokeAlign strokeAlign,
    double cornerRadius,
    List<num> rectangleCornerRadii,
    List<ExportSetting> exportSettings,
    BlendMode blendMode,
    bool preserveRatio,
    LayoutConstraint constraints,
    LayoutAlign layoutAlign,
    String transitionNodeID,
    int transitionDuration,
    EasingType transitionEasing,
    double opacity,
    SizeRectangle absoluteBoundingBox,
    Vector2D size,
    List<List<num>> relativeTransform,
    bool clipsContent,
    LayoutMode layoutMode,
    CounterAxisSizingMode counterAxisSizingMode,
    num horizontalPadding,
    num verticalPadding,
    num itemSpacing,
    List<LayoutGrid> layoutGrids,
    OverflowDirection overflowDirection,
    List<Effect> effects,
    bool isMask,
    bool isMaskOutline,
  }) =>
      Group(
        absoluteBoundingBox: absoluteBoundingBox ?? this.absoluteBoundingBox,
        blendMode: blendMode ?? this.blendMode,
        children: children ?? this.children,
        clipsContent: clipsContent ?? this.clipsContent,
        constraints: constraints ?? this.constraints,
        cornerRadius: cornerRadius ?? this.cornerRadius,
        counterAxisSizingMode:
            counterAxisSizingMode ?? this.counterAxisSizingMode,
        effects: effects ?? this.effects,
        exportSettings: exportSettings ?? this.exportSettings,
        fills: fills ?? this.fills,
        horizontalPadding: horizontalPadding ?? this.horizontalPadding,
        id: id ?? this.id,
        isMask: isMask ?? this.isMask,
        isMaskOutline: isMaskOutline ?? this.isMaskOutline,
        itemSpacing: itemSpacing ?? this.itemSpacing,
        layoutAlign: layoutAlign ?? this.layoutAlign,
        layoutGrids: layoutGrids ?? this.layoutGrids,
        layoutMode: layoutMode ?? this.layoutMode,
        locked: locked ?? this.locked,
        name: name ?? this.name,
        opacity: opacity ?? this.opacity,
        overflowDirection: overflowDirection ?? this.overflowDirection,
        pluginData: pluginData ?? this.pluginData,
        preserveRatio: preserveRatio ?? this.preserveRatio,
        rectangleCornerRadii: rectangleCornerRadii ?? this.rectangleCornerRadii,
        relativeTransform: relativeTransform ?? this.relativeTransform,
        sharedPluginData: sharedPluginData ?? this.sharedPluginData,
        size: size ?? this.size,
        strokeAlign: strokeAlign ?? this.strokeAlign,
        strokeWeight: strokeWeight ?? this.strokeWeight,
        strokes: strokes ?? this.strokes,
        transitionDuration: transitionDuration ?? this.transitionDuration,
        transitionEasing: transitionEasing ?? this.transitionEasing,
        transitionNodeID: transitionNodeID ?? this.transitionNodeID,
        verticalPadding: verticalPadding ?? this.verticalPadding,
        visible: visible ?? this.visible,
      );
}
